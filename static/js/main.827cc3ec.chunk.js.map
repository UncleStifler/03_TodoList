{"version":3,"sources":["components/api/todolists-api.ts","reportWebVitals.ts","components/state/todolists-reducer.ts","components/api/tasks-api.ts","components/state/app-reducer.tsx","components/state/tasks-reducer.ts","components/api/auth-api.tsx","components/utils/error-utils.ts","features/Login/auth-reducer.ts","components/state/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","features/AddItemForm.tsx","features/EditableSpan.tsx","components/tasks/Task.tsx","components/todolist/TodoList.tsx","components/todolist/TodoListsContainer.tsx","features/Login/Page404.tsx","App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todoListId","delete","put","tasksListsAPI","taskId","model","slice","createSlice","name","initialState","status","error","reducers","setAppStatusAC","stateDraft","action","payload","setAppErrorAC","appReducer","reducer","actions","removeTaskAC","state","tasks","index","findIndex","task","id","splice","addTaskAC","unshift","entityTaskStatus","getTasksAC","arrayTasks","map","tl","changeTaskTitleAC","changeTaskEntityStatusAC","changeStatusCheckboxAC","extraReducers","builder","addCase","addTodoListAC","todoList","removeTodoListAC","setTodoListsAC","todoListsArray","forEach","td","tasksReducer","t","filter","addedDate","order","entityStatus","changeTodoListTitleAC","changeTodoListFilterAC","changeTodolistEntityStatusAC","todoListsReducer","loadTodoListsTC","dispatch","res","data","items","authLoginAPI","handleServerAppError","messages","length","handleServerNetworkError","message","isLoggedIn","isInitialized","setIsLoggedInAC","value","setIsInitializedAC","authReducer","rootReducer","combineReducers","todoLists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppReducer","useSelector","window","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","trim","onSubmit","resultCode","catch","resetForm","to","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","Button","AddItemForm","memo","useState","newTaskTitle","setNewTaskTitle","setError","disabled","placeholder","size","autoFocus","onChange","e","currentTarget","onKeyPress","charCode","addItem","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","setTitle","onBlur","onDoubleClick","Task","changeStatusCheckbox","changeTaskTitle","removeTask","onRemoveHandler","useCallback","onChangeTitleHandler","newValue","className","Completed","newIsDoneValue","checked","New","marginLeft","Delete","fontSize","TodoList","changeFilter","removeTodoList","addTask","changeTodoListTitle","todoListTitle","onAllClickHandler","onCompletedClickHandler","onActiveClickHandler","addTaskForAddItem","changeTodoListTitleHandler","newTodoListTitle","tasksForTodolist","Link","TodoListsContainer","tasksObj","useEffect","success","finally","addTaskTC","idTasks","todolistId","tasksID","getState","currentTask","find","priority","startDate","deadline","description","updateTasksStatusTC","removeTodoListTC","changeTaskTitleTC","changeTodoListTitleTC","padding","createTodoListTC","spacing","Paper","Page404","navigate","useNavigate","display","marginTop","flexDirection","App","AppBar","position","Toolbar","edge","mr","Menu","Typography","cursor","component","flexGrow","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.827cc3ec.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type MeResponseType = {\r\n    id: string,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bd989617-b1e7-48f3-b931-dc63118fa1e9\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistType[]>('/todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('/todo-lists', {title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoList(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todoListId}`, {title: title})\r\n    }\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {todoListsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loadTasksTC} from \"./tasks-reducer\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todoLists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodoListAC(state, action: PayloadAction<{ todoListId: string }>) {\r\n            const index = state.findIndex(t => t.id !== action.payload.todoListId)\r\n            if (index !== -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{ todoList: TodolistType }>) {\r\n            state.unshift({\r\n                ...action.payload.todoList,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0,\r\n                entityStatus: 'idle'\r\n            })\r\n        },\r\n        changeTodoListTitleAC(state, action: PayloadAction<{ todoListId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodoListFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, todoListId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        setTodoListsAC(stateDraft, action: PayloadAction<{ todoListsArray: TodolistType[] }>) {\r\n            return action.payload.todoListsArray.map(t => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todoListsReducer = slice.reducer;\r\nexport const {\r\n    setTodoListsAC,\r\n    removeTodoListAC,\r\n    addTodoListAC,\r\n    changeTodoListTitleAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodoListFilterAC\r\n} = slice.actions\r\n\r\nexport const loadTodoListsTC = (dispatch: Dispatch<any>): void => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todoListsAPI.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC({todoListsArray: res.data}))\r\n            res.data.forEach((todoList) => {\r\n                dispatch(loadTasksTC(todoList.id))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n        })\r\n}\r\n\r\nexport enum ResultCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const createTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todoListsAPI.createTodoList(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(addTodoListAC({todoList: res.data.data.item}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({\r\n                        error: res.data.messages.length ?\r\n                            res.data.messages[0] : 'some error'\r\n                    }))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: error.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({todoListId, entityStatus: 'loading'}))\r\n        todoListsAPI.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(removeTodoListAC({todoListId}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({\r\n                        error: res.data.messages.length ?\r\n                            res.data.messages[0] : 'some error'\r\n                    }))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: error.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: 'idle'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todoListsAPI.updateTodoList(todoListId, title)\r\n            .then(() => {\r\n                dispatch(changeTodoListTitleAC({todoListId, title}))\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: error.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: 'idle'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {ResponseType, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"./todolists-api\";\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype getTasksListResponse = {\r\n    error: string| null\r\n    totalCount: number\r\n    items: TaskType[]\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bd989617-b1e7-48f3-b931-dc63118fa1e9'\r\n    }\r\n})\r\n\r\nexport const tasksListsAPI = {\r\n    getTaskLists(todoListId: string) {\r\n        return instance.get<getTasksListResponse>(`${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post(`${todoListId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(stateDraft, action: PayloadAction<{status: RequestStatusType}>) {\r\n            stateDraft.status = action.payload.status;\r\n        },\r\n        setAppErrorAC(stateDraft, action: PayloadAction<{error: string | null}>) {\r\n            stateDraft.error = action.payload.error;\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions;\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {\r\n    addTodoListAC, removeTodoListAC,\r\n    ResultCodes, setTodoListsAC,\r\n\r\n} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {tasksListsAPI} from \"../api/tasks-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todoListId: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift({\r\n                ...action.payload, entityTaskStatus: 'idle'\r\n            })\r\n        },\r\n        getTasksAC(state, action: PayloadAction<{ todoListId: string, arrayTasks: TaskType[] }>) {\r\n            state[action.payload.todoListId] = action.payload.arrayTasks\r\n                .map(tl => ({...tl, entityTaskStatus: 'idle'}))\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{ taskId: string, title: string, todoListId: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], title: action.payload.title}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ taskId: string, todoListId: string, entityTaskStatus: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityTaskStatus: action.payload.entityTaskStatus}\r\n            }\r\n        },\r\n        changeStatusCheckboxAC(state, action: PayloadAction<{ taskId: string, status: TaskStatuses, todoListId: string }>) {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], status: action.payload.status}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todoList.id] = [];\r\n        });\r\n        builder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.todoListId];\r\n        });\r\n        builder.addCase(setTodoListsAC, (state, action) => {\r\n            action.payload.todoListsArray.forEach(td => {\r\n                state[td.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {\r\n    getTasksAC,\r\n    addTaskAC,\r\n    removeTaskAC,\r\n    changeTaskEntityStatusAC,\r\n    changeTaskTitleAC,\r\n    changeStatusCheckboxAC\r\n} = slice.actions;\r\n\r\nexport const loadTasksTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksListsAPI.getTaskLists(todoListId)\r\n            .then((res) => {\r\n                dispatch(getTasksAC({todoListId, arrayTasks: res.data.items}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todoListId, entityTaskStatus: 'loading'}))\r\n        tasksListsAPI.deleteTask(todoListId, taskId)\r\n            .then(() => {\r\n                dispatch(removeTaskAC({taskId, todoListId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksListsAPI.createTask(todoListId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ?\r\n                        res.data.messages[0] : 'some error'))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: error.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: 'idle'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTasksStatusTC = (todoListId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const allTasks = state.tasks\r\n        const tasksForThisTodoList = allTasks[todoListId]\r\n        const currentTask = tasksForThisTodoList.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.description,\r\n                description: currentTask.description\r\n            }\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            dispatch(changeTaskEntityStatusAC({taskId, todoListId, entityTaskStatus: 'loading'}))\r\n            tasksListsAPI.updateTask(todoListId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeStatusCheckboxAC({taskId, status, todoListId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({taskId, todoListId, entityTaskStatus: 'idle'}))\r\n                })\r\n        }\r\n    }\r\n\r\nexport const changeTaskTitleTC = (taskId: string, title: string, todoListId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const currentTask = state.tasks[todoListId].find((t => t.id === taskId))\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: title,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.description,\r\n                description: currentTask.description\r\n            }\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            dispatch(changeTaskEntityStatusAC({taskId, todoListId, entityTaskStatus: 'loading'}))\r\n            tasksListsAPI.updateTask(todoListId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeTaskTitleAC({taskId, title, todoListId}))\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    dispatch(setAppErrorAC({error: error.message}))\r\n                })\r\n                .finally(() => {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({taskId, todoListId, entityTaskStatus: 'idle'}))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport type TasksDomain_Type = TaskType & { entityTaskStatus: RequestStatusType }\r\nexport type TasksStateType = { [key: string]: TasksDomain_Type[] }\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {MeResponseType, ResponseType} from './todolists-api'\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bd989617-b1e7-48f3-b931-dc63118fa1e9\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\nexport const authLoginAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('/auth/me')\r\n    },\r\n    logout() {return instance.delete<ResponseType>('/auth/login')}\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../state/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {\r\n    setAppStatusAC\r\n} from \"../../components/state/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authLoginAPI, LoginParamsType} from \"../../components/api/auth-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../components/utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(stateDraft, action: PayloadAction<{value: boolean}>) {\r\n            stateDraft.isLoggedIn = action.payload.value;\r\n        },\r\n        setIsInitializedAC(stateDraft, action: PayloadAction<{value: boolean}>) {\r\n            stateDraft.isInitialized = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC, setIsInitializedAC} = slice.actions\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authLoginAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authLoginAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({value: true}));\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authLoginAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {combineReducers} from 'redux'\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware as any)\r\n})\r\n\r\nexport const useAppReducer: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppReducer<string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../../components/state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../components/api/auth-api\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppReducer<boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email.trim())) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be more then 4 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email &&\r\n                            formik.errors.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        {formik.touched.password &&\r\n                            formik.errors.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        }\r\n    }\r\n    const enterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13 && newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                placeholder='Add new task'\r\n                size=\"small\"\r\n                autoFocus\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={enterHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                disabled={props.disabled}\r\n                color='primary'\r\n                onClick={addTaskHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleForEditableName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                disabled={props.disabled}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onBlur={activateViewMode}\r\n                autoFocus\r\n                onChange={onChangeTitleForEditableName}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../features/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolists-api\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    removeTask: (idTasks: string, todolistId: string) => void\r\n    changeStatusCheckbox: (tasksID: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n    entityStatus: RequestStatusType\r\n    entityTaskStatus: RequestStatusType\r\n\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {\r\n        task, todoListId, changeStatusCheckbox, changeTaskTitle, removeTask,\r\n        entityTaskStatus\r\n    } = props\r\n\r\n    const onRemoveHandler = useCallback(() => removeTask(task.id, todoListId),\r\n        [task.id, todoListId, removeTask])\r\n\r\n    const onChangeHandlerCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatusCheckbox(task.id, newIsDoneValue ?\r\n            TaskStatuses.Completed : TaskStatuses.New, todoListId)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todoListId)\r\n    }, [task.id, changeTaskTitle, todoListId])\r\n\r\n    return (\r\n        <li key={task.id}\r\n            className={`commonClassName ${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}`}>\r\n            <Checkbox\r\n                disabled={entityTaskStatus === 'loading'}\r\n                color=\"success\"\r\n                onChange={onChangeHandlerCheckbox}\r\n                checked={task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan\r\n                disabled={entityTaskStatus === 'loading'}\r\n                title={task.title}\r\n                onChange={onChangeTitleHandler}/>\r\n            <IconButton\r\n                disabled={entityTaskStatus === 'loading'}\r\n                style={{marginLeft: \"5px\"}}\r\n                onClick={onRemoveHandler}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n        </li>\r\n    );\r\n});\r\n","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"../../features/AddItemForm\";\r\nimport {EditableSpan} from \"../../features/EditableSpan\";\r\nimport {Task} from \"../tasks/Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport {TaskStatuses} from \"../api/todolists-api\";\r\nimport {FilterValuesType} from \"../state/todolists-reducer\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\nimport {TasksDomain_Type} from \"../state/tasks-reducer\";\r\n\r\nexport type TodoListType = {\r\n    todoListId: string\r\n    todoListTitle: string\r\n    tasks: TasksDomain_Type[]\r\n    removeTask: (idTasks: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeStatusCheckbox: (tasksID: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTodoListTitle: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListType) {\r\n\r\n    const {\r\n        changeFilter, todoListId,\r\n        removeTodoList, addTask, changeTodoListTitle,\r\n        tasks, filter, todoListTitle, removeTask,\r\n        changeStatusCheckbox, changeTaskTitle, entityStatus\r\n    } = props\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    const addTaskForAddItem = useCallback((title: string) => {\r\n        addTask(title, todoListId)\r\n    }, [addTask, todoListId])\r\n\r\n    const changeTodoListTitleHandler = useCallback((newTodoListTitle: string) => {\r\n        changeTodoListTitle(todoListId, newTodoListTitle)\r\n    }, [changeTodoListTitle, todoListId])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n   // console.log(JSON.parse(JSON.stringify(tasksForTodolist)))\r\n\r\n    return (\r\n        <div>\r\n            <Link>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={todoListTitle}\r\n                        onChange={changeTodoListTitleHandler}/>\r\n                    <IconButton\r\n                        onClick={removeTodoListHandler}\r\n                        disabled={entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n            </Link>\r\n            <AddItemForm\r\n                addItem={addTaskForAddItem}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul>\r\n                {tasksForTodolist && tasksForTodolist.map(t =>\r\n                    <Task\r\n                        key={t.id}\r\n                        todoListId={todoListId}\r\n                        removeTask={removeTask}\r\n                        changeStatusCheckbox={changeStatusCheckbox}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                        entityStatus={entityStatus}\r\n                        entityTaskStatus={t.entityTaskStatus}\r\n                    />)}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}>\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    color={'success'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    color={'warning'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../state/store\";\r\nimport {\r\n    changeTodoListFilterAC, changeTodoListTitleTC, createTodoListTC,\r\n    FilterValuesType,\r\n    loadTodoListsTC, removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"../state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskTitleTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    updateTasksStatusTC\r\n} from \"../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../features/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TodoList from \"./TodoList\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst TodoListsContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppReducer<boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const todoLists = useAppReducer<TodolistDomainType[]>(state => state.todoLists)\r\n    const tasksObj = useAppReducer<TasksStateType>(state => state.tasks)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(loadTodoListsTC)\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskTC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((idTasks: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(idTasks, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = (value: FilterValuesType, todoListId: string) => {\r\n        const action = changeTodoListFilterAC({filter: value, todoListId})\r\n        dispatch(action)\r\n    }\r\n\r\n    const changeStatusCheckbox = (tasksID: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTasksStatusTC(todoListId, tasksID, status))\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        dispatch(createTodoListTC(title))\r\n    }\r\n\r\n    const changeTaskTitle = (id: string, newValue: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleTC(id, newValue, todoListId))\r\n    }\r\n\r\n    const changeTodoListTitle = (todoListId: string, newTodoListTitle: string) => {\r\n        dispatch(changeTodoListTitleTC(todoListId, newTodoListTitle))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {\r\n                    todoLists.map(t => {\r\n                        let tasksForTodolist = tasksObj[t.id]\r\n                        return (\r\n                            <Grid item key={t.id}>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    style={{padding: \"15px\"}}>\r\n                                    <TodoList\r\n                                        key={t.id}\r\n                                        todoListId={t.id}\r\n                                        todoListTitle={t.title}\r\n                                        entityStatus={t.entityStatus}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatusCheckbox={changeStatusCheckbox}\r\n                                        filter={t.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>)\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoListsContainer;\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nconst Page404 = () => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <Grid container spacing={3}\r\n              style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  marginTop: \"40px\"\r\n              }}>\r\n            <Paper\r\n                elevation={1}\r\n                style={{\r\n                    padding: \"15px\",\r\n                    margin: \"30px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n\r\n                }}>\r\n                <h1>404: PAGE NOT FOUND</h1>\r\n                <Button\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\"\r\n                    }}\r\n                    variant=\"contained\"\r\n                    color={'success'}\r\n                    onClick={() => navigate(\"/\")}>\r\n                    HOME PAGE\r\n                </Button>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Page404;\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useAppReducer} from \"./components/state/store\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {RequestStatusType} from \"./components/state/app-reducer\";\r\nimport {Login} from \"./features/Login/Login\";\r\nimport {Routes, Route, Navigate, useNavigate} from \"react-router-dom\"\r\nimport TodoListsContainer from \"./components/todolist/TodoListsContainer\";\r\nimport Page404 from \"./features/Login/Page404\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeAppTC, logoutTC} from \"./features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useAppReducer<RequestStatusType>(state => state.app.status)\r\n    const {isInitialized, isLoggedIn} = useAppReducer(state => state.auth)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch]);\r\n\r\n    const loginLogoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"Active Todo List\"\r\n                        sx={{mr: 2}}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        onClick={() => navigate(\"/\")}\r\n                        style={{cursor: \"pointer\"}}\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{flexGrow: 1}}>\r\n                        You Trello board\r\n                    </Typography>\r\n                    {isLoggedIn && <Button\r\n                        onClick={loginLogoutHandler}\r\n                        color=\"inherit\">\r\n                        Logout\r\n                    </Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/\" element={<TodoListsContainer/>}/>\r\n                    <Route path=\"/404\" element={<Page404/>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}