{"version":3,"sources":["components/api/todolists-api.ts","reportWebVitals.ts","components/state/todolists-reducer.ts","components/api/tasks-api.ts","components/app/app-reducer.tsx","components/state/tasks-reducer.ts","components/api/auth-api.tsx","components/utils/error-utils.ts","features/Login/auth-reducer.ts","components/state/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","features/Todolist/TodoListsContainer.tsx","features/Login/Page404.tsx","App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todoListId","delete","put","tasksListsAPI","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","changeTaskEntityStatusAC","entityTaskStatus","loadTodoListsTC","dispatch","res","todoListsArray","data","forEach","todoList","id","arrayTasks","getTasksAC","items","authLoginAPI","handleServerAppError","messages","length","handleServerNetworkError","message","isLoggedIn","isInitialized","setIsLoggedInAC","value","rootReducer","combineReducers","todoLists","state","action","map","t","filter","entityStatus","todolistId","addedDate","order","tl","tasks","stateCopy","task","todolistTasks","copyState","ent","app","auth","store","createStore","applyMiddleware","thunk","useAppReducer","useSelector","window","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","trim","onSubmit","resultCode","catch","resetForm","to","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","memo","useState","newTaskTitle","setNewTaskTitle","setError","disabled","placeholder","size","autoFocus","onChange","e","currentTarget","onKeyPress","charCode","addItem","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","setTitle","onBlur","onDoubleClick","Task","changeStatusCheckbox","changeTaskTitle","removeTask","onRemoveHandler","useCallback","onChangeTitleHandler","newValue","className","Completed","newIsDoneValue","checked","New","marginLeft","Delete","fontSize","TodoList","changeFilter","removeTodoList","addTask","changeTodoListTitle","todoListTitle","onAllClickHandler","onCompletedClickHandler","onActiveClickHandler","addTaskForAddItem","changeTodoListTitleHandler","newTodoListTitle","tasksForTodolist","Link","TodoListsContainer","tasksObj","useEffect","success","finally","addTaskTC","idTasks","removeTaskAC","changeTodoListFilterAC","tasksID","getState","currentTask","find","priority","startDate","deadline","description","changeStatusCheckboxAC","updateTasksStatusTC","changeTodolistEntityStatusAC","removeTodoListAC","removeTodoListTC","addTodoList","todo","createTodoListTC","changeTaskTitleAC","changeTaskTitleTC","changeTodoListTitleAC","changeTodoListTitleTC","padding","spacing","Paper","Page404","navigate","useNavigate","display","marginTop","flexDirection","App","AppBar","position","Toolbar","edge","mr","Menu","Typography","cursor","component","flexGrow","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcb33d4d.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type MeResponseType = {\r\n    id: string,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bd989617-b1e7-48f3-b931-dc63118fa1e9\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistType[]>('/todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('/todo-lists', {title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoList(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todoListId}`, {title: title})\r\n    }\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {todoListsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loadTasksTC} from \"./tasks-reducer\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todoListsReducer = (state: TodolistDomainType[] = initialState, action: ActionTypes): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"TODOLIST/SET-TODOLIST\": {\r\n            return action.todoListsArray.map(t => {\r\n                return {...t, filter: 'all', entityStatus: 'idle'}\r\n            })\r\n        }\r\n        case \"TODOLIST/REMOVE-TODOLIST\": {\r\n            return state.filter(t => t.id !== action.id)\r\n        }\r\n        case \"TODOLIST/ADD-TODOLIST\": {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0,\r\n                entityStatus: 'idle'\r\n            }, ...state]\r\n        }\r\n        case \"TODOLIST/CHANGE-TODOLIST-TITLE\" : {\r\n            return state.map(tl =>\r\n                tl.title === action.title ? {...tl, title: action.title} : tl)\r\n\r\n        }\r\n        case \"TODOLIST/CHANGE-TODOLIST-FILTER\" : {\r\n            return state.map(tl =>\r\n                tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"TODOLIST/CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.todoListId ?\r\n                {...tl, entityStatus: action.entityStatus} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTodoListsAC = (todoListsArray: TodolistType[]) => {\r\n    return {type: 'TODOLIST/SET-TODOLIST', todoListsArray} as const\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string) => {\r\n    return {type: \"TODOLIST/REMOVE-TODOLIST\", id: todoListId} as const\r\n}\r\n\r\nexport const addTodoListAC = (todo: any) => {\r\n    return {\r\n        type: \"TODOLIST/ADD-TODOLIST\",\r\n        title: todo.title,\r\n        todolistId: todo.id\r\n    } as const\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string) => {\r\n    return {\r\n        type: \"TODOLIST/CHANGE-TODOLIST-TITLE\",\r\n        id: todoListId,\r\n        title: title\r\n    } as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValuesType, todoListId: string) => {\r\n    return {\r\n        type: \"TODOLIST/CHANGE-TODOLIST-FILTER\",\r\n        id: todoListId,\r\n        filter: filter\r\n    } as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (todoListId: string, entityStatus: RequestStatusType) => ({\r\n    type: \"TODOLIST/CHANGE-TODOLIST-ENTITY-STATUS\",\r\n    todoListId, entityStatus\r\n} as const)\r\n\r\nexport const loadTodoListsTC = (dispatch: Dispatch<any>): void => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListsAPI.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            res.data.forEach((todoList) => {\r\n                dispatch(loadTasksTC(todoList.id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n        })\r\n}\r\n\r\nexport enum ResultCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const createTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.createTodoList(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(addTodoListAC(res.data.data.item))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ?\r\n                        res.data.messages[0] : 'some error'))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n        todoListsAPI.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(removeTodoListAC(todoListId))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ?\r\n                        res.data.messages[0] : 'some error'))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.updateTodoList(todoListId, title)\r\n            .then(() => {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type changeTodoListFilterActionType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\nexport type changeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionTypes =\r\n    RemoveTodoListActionType |\r\n    AddTodoListActionType |\r\n    ChangeTodoListTitleActionType |\r\n    ChangeTodoListFilterActionType |\r\n    SetTodoListsActionType |\r\n    changeTodolistEntityStatusActionType\r\n\r\n\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {ResponseType, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"./todolists-api\";\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype getTasksListResponse = {\r\n    error: string| null\r\n    totalCount: number\r\n    items: TaskType[]\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bd989617-b1e7-48f3-b931-dc63118fa1e9'\r\n    }\r\n})\r\n\r\nexport const tasksListsAPI = {\r\n    getTaskLists(todoListId: string) {\r\n        return instance.get<getTasksListResponse>(`${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post(`${todoListId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n// status === \"loading\" - крутилку показываем\r\n// status === 'idle' / 'succeeded' / 'failed' - крутилку скрываем\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status: status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error: error} as const)\r\n\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    setAppErrorActionType |\r\n    setAppStatusActionType\r\n","import {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType, ResultCodes,\r\n    SetTodoListsActionType\r\n} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {tasksListsAPI} from \"../api/tasks-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport type TasksDomain_Type = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TasksDomain_Type[]\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"TASKS/LOAD-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.arrayTasks\r\n                .map(tl => ({...tl, entityTaskStatus: 'idle'}))\r\n            return stateCopy\r\n        }\r\n\r\n        case \"TASKS/REMOVE-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todoListId]\r\n            stateCopy[action.todoListId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case \"TASKS/ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n                .map(tl => ({...tl, entityTaskStatus: 'idle'}))\r\n            return {...stateCopy}\r\n        }\r\n        case \"TASKS/CHANGE-CHECKBOX-STATUS\": {\r\n            let todolistTasks = state[action.todoListId];\r\n            state[action.todoListId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n            return ({...state});\r\n        }\r\n        case \"TASKS/CHANGE-TASK-TITLE\": {\r\n            let tasks = state[action.todoListId]\r\n            state[action.todoListId] = tasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return ({...state})\r\n        }\r\n        case \"TODOLIST/ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"TODOLIST/REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"TODOLIST/SET-TODOLIST\": {\r\n            const copyState = {...state}\r\n            action.todoListsArray.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"TASK/CHANGE-TASK-ENTITY-STATUS\": {\r\n           let tasks = state[action.todoListId]\r\n            state[action.todoListId] = tasks\r\n                .map( ent => ent.id === action.taskId ? {...ent, entityTaskStatus: action.entityTaskStatus}: ent )\r\n            return ({...state})\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type loadTasksActionType = ReturnType<typeof getTasksAC>\r\n\r\nexport const getTasksAC = (todoListId: string, arrayTasks: TaskType[]) => {\r\n    return {type: 'TASKS/LOAD-TASKS', todoListId, arrayTasks} as const\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n    return {\r\n        type: \"TASKS/REMOVE-TASK\",\r\n        taskId: taskId,\r\n        todoListId: todoListId\r\n    } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: \"TASKS/ADD-TASK\",\r\n        task\r\n    } as const\r\n}\r\n\r\nexport const changeStatusCheckboxAC = (taskId: string, status: TaskStatuses, todoListId: string) => {\r\n    return {\r\n        type: \"TASKS/CHANGE-CHECKBOX-STATUS\",\r\n        status,\r\n        todoListId,\r\n        taskId,\r\n    } as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => {\r\n    return {\r\n        type: \"TASKS/CHANGE-TASK-TITLE\",\r\n        title,\r\n        todoListId,\r\n        taskId,\r\n    } as const\r\n}\r\n\r\nexport const changeTaskEntityStatusAC = (taskId: string, todoListId: string, entityTaskStatus: RequestStatusType) => ({\r\n    type: \"TASK/CHANGE-TASK-ENTITY-STATUS\",\r\n    taskId, todoListId, entityTaskStatus\r\n} as const)\r\n\r\n\r\nexport const loadTasksTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksListsAPI.getTaskLists(todoListId)\r\n            .then((res) => {\r\n                dispatch(getTasksAC(todoListId, res.data.items))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId,todoListId,'loading'))\r\n        tasksListsAPI.deleteTask(todoListId, taskId)\r\n            .then(() => {\r\n                dispatch(removeTaskAC(taskId, todoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksListsAPI.createTask(todoListId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.success) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ?\r\n                        res.data.messages[0] : 'some error'))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                dispatch(setAppErrorAC(error.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTasksStatusTC = (todoListId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const allTasks = state.tasks\r\n        const tasksForThisTodoList = allTasks[todoListId]\r\n        const currentTask = tasksForThisTodoList.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.description,\r\n                description: currentTask.description,\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(taskId,todoListId,'loading'))\r\n            tasksListsAPI.updateTask(todoListId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeStatusCheckboxAC(taskId, status, todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId,todoListId,'idle'))\r\n                })\r\n        }\r\n    }\r\n\r\nexport const changeTaskTitleTC = (taskId: string, title: string, todoListId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const currentTask = state.tasks[todoListId].find((t => t.id === taskId))\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: title,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.description,\r\n                description: currentTask.description,\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(taskId,todoListId,'loading'))\r\n            tasksListsAPI.updateTask(todoListId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    dispatch(setAppErrorAC(error.message))\r\n                })\r\n                .finally(() => {\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId,todoListId,'idle'))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionTypes = RemoveTaskActionType | AddTaskActionType |\r\n    ChangeFilterStatusType | ChangeTaskTitleType | AddTodoListActionType |\r\n    RemoveTodoListActionType | loadTasksActionType | SetTodoListsActionType |\r\n    changeTaskEntityActionType\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport type ChangeFilterStatusType = ReturnType<typeof changeStatusCheckboxAC>\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\r\nexport type changeTaskEntityActionType = ReturnType<typeof changeTaskEntityStatusAC>\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {MeResponseType, ResponseType} from './todolists-api'\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bd989617-b1e7-48f3-b931-dc63118fa1e9\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\nexport const authLoginAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('/auth/me')\r\n    },\r\n    logout() {return instance.delete<ResponseType>('/auth/login')}\r\n}\r\n","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    setAppStatusActionType\r\n} from \"../../components/app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authLoginAPI, LoginParamsType} from \"../../components/api/auth-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../components/utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"login/SET-INITIALIZED-AC\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'login/SET-INITIALIZED-AC', value} as const)\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authLoginAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authLoginAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true));\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authLoginAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> |\r\n    ReturnType<typeof setIsInitializedAC> |\r\n    setAppStatusActionType | setAppErrorActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../../features/Login/auth-reducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport const useAppReducer : TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppReducer<string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../../components/state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../components/api/auth-api\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppReducer<boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email.trim())) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be more then 4 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email &&\r\n                            formik.errors.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        {formik.touched.password &&\r\n                            formik.errors.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        }\r\n    }\r\n    const enterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13 && newTaskTitle.trim() !== \"\") {\r\n            props.addItem(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                placeholder='Add new task'\r\n                size=\"small\"\r\n                autoFocus\r\n                value={newTaskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={enterHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                disabled={props.disabled}\r\n                color='primary'\r\n                onClick={addTaskHandler}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleForEditableName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                disabled={props.disabled}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onBlur={activateViewMode}\r\n                autoFocus\r\n                onChange={onChangeTitleForEditableName}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    removeTask: (idTasks: string, todolistId: string) => void\r\n    changeStatusCheckbox: (tasksID: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n    entityStatus: RequestStatusType\r\n    entityTaskStatus: RequestStatusType\r\n\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    // const entityTaskStatus = useAppReducer<TasksStateType>(state => state.tasks)\r\n\r\n    const {\r\n        task, todoListId, changeStatusCheckbox, changeTaskTitle, removeTask,\r\n        entityTaskStatus\r\n    } = props\r\n\r\n    const onRemoveHandler = useCallback(() => removeTask(task.id, todoListId),\r\n        [task.id, todoListId, removeTask])\r\n\r\n    const onChangeHandlerCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatusCheckbox(task.id, newIsDoneValue ?\r\n            TaskStatuses.Completed : TaskStatuses.New, todoListId)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todoListId)\r\n    }, [task.id, changeTaskTitle, todoListId])\r\n\r\n    return (\r\n        <li key={task.id}\r\n            className={`commonClassName ${task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}`}>\r\n            <Checkbox\r\n                disabled={entityTaskStatus === 'loading'}\r\n                color=\"success\"\r\n                onChange={onChangeHandlerCheckbox}\r\n                checked={task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan\r\n                disabled={entityTaskStatus === 'loading'}\r\n                title={task.title}\r\n                onChange={onChangeTitleHandler}/>\r\n            <IconButton\r\n                disabled={entityTaskStatus === 'loading'}\r\n                style={{marginLeft: \"5px\"}}\r\n                onClick={onRemoveHandler}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n        </li>\r\n    );\r\n});","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport {TaskStatuses} from \"./api/todolists-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\nimport {TasksDomain_Type} from \"./state/tasks-reducer\";\r\n\r\nexport type TodoListType = {\r\n    todoListId: string\r\n    todoListTitle: string\r\n    tasks: TasksDomain_Type[]\r\n    removeTask: (idTasks: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeStatusCheckbox: (tasksID: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTodoListTitle: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListType) {\r\n\r\n    const {\r\n        changeFilter, todoListId,\r\n        removeTodoList, addTask, changeTodoListTitle,\r\n        tasks, filter, todoListTitle, removeTask,\r\n        changeStatusCheckbox, changeTaskTitle, entityStatus\r\n    } = props\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", todoListId)\r\n    }, [changeFilter, todoListId])\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    // изначальная ц-ция просит два аргумента, так можно от него избавиться\r\n    const addTaskForAddItem = useCallback((title: string) => {\r\n        addTask(title, todoListId)\r\n    }, [addTask, todoListId])\r\n\r\n    const changeTodoListTitleHandler = useCallback((newTodoListTitle: string) => {\r\n        changeTodoListTitle(todoListId, newTodoListTitle)\r\n    }, [changeTodoListTitle, todoListId])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={todoListTitle}\r\n                        onChange={changeTodoListTitleHandler}/>\r\n                    <IconButton\r\n                        onClick={removeTodoListHandler}\r\n                        disabled={entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n            </Link>\r\n            <AddItemForm\r\n                addItem={addTaskForAddItem}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <ul>\r\n                {tasksForTodolist && tasksForTodolist.map(t =>\r\n                    <Task\r\n                        key={t.id}\r\n                        todoListId={todoListId}\r\n                        removeTask={removeTask}\r\n                        changeStatusCheckbox={changeStatusCheckbox}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                        entityStatus={entityStatus}\r\n                        entityTaskStatus={t.entityTaskStatus}\r\n                    />)}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}>\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    color={'success'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    color={'warning'}\r\n                    variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppReducer} from \"../../components/state/store\";\r\nimport {\r\n    changeTodoListFilterAC, changeTodoListTitleTC, createTodoListTC,\r\n    FilterValuesType,\r\n    loadTodoListsTC, removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"../../components/state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskTitleTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    updateTasksStatusTC\r\n} from \"../../components/state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../components/api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../components/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TodoList from \"../../components/TodoList\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst TodoListsContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppReducer<boolean>(state => state.auth.isLoggedIn )\r\n\r\n\r\n    const todoLists = useAppReducer<TodolistDomainType[]>(state => state.todoLists)\r\n    const tasksObj = useAppReducer<TasksStateType>(state => state.tasks)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(loadTodoListsTC)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskTC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((idTasks: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(idTasks, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListId: string) => {\r\n        const action = changeTodoListFilterAC(value, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeStatusCheckbox = useCallback((tasksID: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTasksStatusTC(todoListId, tasksID, status))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newValue: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleTC(id, newValue, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((todoListId: string, newTodoListTitle: string) => {\r\n        const thunk = changeTodoListTitleTC(todoListId, newTodoListTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {\r\n                    todoLists.map(t => {\r\n                        let tasksForTodolist = tasksObj[t.id]\r\n                        return (\r\n                            <Grid item key={t.id}>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    style={{padding: \"15px\"}}>\r\n                                    <TodoList\r\n                                        key={t.id}\r\n                                        todoListId={t.id}\r\n                                        todoListTitle={t.title}\r\n                                        entityStatus={t.entityStatus}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatusCheckbox={changeStatusCheckbox}\r\n                                        filter={t.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>)\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoListsContainer;\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\n\r\nconst Page404 = () => {\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <Grid container spacing={3}\r\n              style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  marginTop: \"40px\"\r\n              }}>\r\n            <Paper\r\n                elevation={1}\r\n                style={{\r\n                    padding: \"15px\",\r\n                    margin: \"30px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n\r\n                }}>\r\n                <h1>404: PAGE NOT FOUND</h1>\r\n                <Button\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\"\r\n                    }}\r\n                    variant=\"contained\"\r\n                    color={'success'}\r\n                    onClick={() => navigate(\"/\")}>\r\n                    HOME PAGE\r\n                </Button>\r\n\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Page404;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useAppReducer} from \"./components/state/store\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {RequestStatusType} from \"./components/app/app-reducer\";\r\nimport {Login} from \"./features/Login/Login\";\r\nimport {Routes, Route, Navigate, useNavigate} from \"react-router-dom\"\r\nimport TodoListsContainer from \"./features/Todolist/TodoListsContainer\";\r\nimport Page404 from \"./features/Login/Page404\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {initializeAppTC, InitialStateType, logoutTC} from \"./features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useAppReducer<RequestStatusType>(state => state.app.status)\r\n    const {isInitialized, isLoggedIn} = useAppReducer<InitialStateType>(state => state.auth)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, []);\r\n\r\n    const loginLogoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"Active Todo List\"\r\n                        sx={{mr: 2}}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        onClick={() => navigate(\"/\")}\r\n                        style={{cursor: \"pointer\"}}\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{flexGrow: 1}}>\r\n                        You Todo List\r\n                    </Typography>\r\n                    {isLoggedIn && <Button\r\n                        onClick={loginLogoutHandler}\r\n                        color=\"inherit\">\r\n                        Logout\r\n                    </Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/\" element={<TodoListsContainer/>}/>\r\n                    <Route path=\"/404\" element={<Page404/>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}